name: Node.js CI

on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: v20.11.1
          cache: "npm"
      - run: npm ci
      - run: npm run lint -- --output-file eslint-report.txt || true
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: lint-results
          path: eslint-report.txt
          retention-days: 14

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: v20.11.1
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/

  test:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: v20.11.1
          cache: "npm"
      - run: npm ci
      - run: npm test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage
          path: |
            coverage/
            lcov-report
          retention-days: 14

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist
      - uses: hashicorp/setup-terraform@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        env:
          DOCKER_IMAGE: allowance-checker
        run: |
          docker build -t $DOCKER_IMAGE .
          docker save $DOCKER_IMAGE > app.tar

      - name: Get EC2 IP
        id: terraform
        run: |
          echo "instance_ip=$(terraform output -raw instance_ip)" >> $GITHUB_OUTPUT

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.terraform.outputs.instance_ip }} >> ~/.ssh/known_hosts
          cp ~/.ssh/id_rsa .ansible_key

      - name: Create inventory file
        run: |
          echo "[app_servers]" > inventory.ini
          echo "${{ steps.terraform.outputs.instance_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

      - name: Deploy with Ansible
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/site.yml
          directory: ./
          key: ${{ secrets.SSH_KEY }}
          inventory: inventory.ini
          options: |
            --verbose
            -e "vite_apikey=${{ secrets.VITE_APIKEY }}"
