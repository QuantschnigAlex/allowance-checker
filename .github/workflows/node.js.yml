name: Node.js CI

on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: v20.11.1
          cache: "npm"
      - run: npm ci
      - run: npm run lint -- --output-file eslint-report.txt || true
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: lint-results
          path: eslint-report.txt
          retention-days: 14

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: v20.11.1
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/

  test:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: v20.11.1
          cache: "npm"
      - run: npm ci
      - run: npm test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage
          path: |
            coverage/
            lcov-report
          retention-days: 14

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist
      - uses: hashicorp/setup-terraform@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        env:
          DOCKER_IMAGE: allowance-checker
        run: |
          # Build Docker image
          docker build -t $DOCKER_IMAGE .
          docker save $DOCKER_IMAGE > app.tar

      - name: Deploy to EC2
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          EC2_USER: ec2-user
          DOCKER_IMAGE: allowance-checker
        run: |
          EC2_IP=$(terraform output -raw instance_ip)
          echo "Instance IP: ${EC2_IP}"

          echo "$SSH_KEY" | base64 -d > key.pem 
          chmod 400 key.pem

          echo "Waiting for instance setup..."
          for i in {1..30}; do
            if ssh -i key.pem -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '[ -f /tmp/user_data_complete ]'; then
              echo "Instance setup complete!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Timeout waiting for instance setup"
              exit 1
            fi
            echo "Waiting for instance setup
            sleep 10
          done

          echo "Verifying Docker installation..."
          ssh -i key.pem -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'docker --version' || exit 1

          echo "Copying Docker image..."
          scp -i key.pem -o StrictHostKeyChecking=no app.tar ${EC2_USER}@${EC2_IP}:/app/

          ssh -i key.pem -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
            docker system prune -af
            cd /app
            docker load < app.tar
            docker stop app || true
            docker rm app || true
            docker run -d --name app -p 80:80 --restart unless-stopped '"$DOCKER_IMAGE"'
            sleep 5
            if ! docker ps | grep -q app; then
              echo "Container failed to start"
              docker logs app
              exit 1
            fi
          '
          echo "Deployment completed successfully!"
